import React, { createContext, useContext, useState, ReactNode } from 'react';
import { useColorScheme } from 'react-native';
import { colors, ColorMode } from './constants/ui/colors';

interface ThemeContextType {
  colorMode: ColorMode;
  setColorMode: (mode: ColorMode | 'system') => void;
  currentColors: typeof colors.light | typeof colors.dark;
  isDark: boolean;
  isLight: boolean;
  toggleColorMode: () => void;
}

const ThemeContext = createContext<ThemeContextType | undefined>(undefined);

interface ThemeProviderProps {
  children: ReactNode;
  defaultMode?: ColorMode | 'system';
}

export function ThemeProvider({ children, defaultMode = 'system' }: ThemeProviderProps) {
  const systemColorScheme = useColorScheme();
  const [colorModePreference, setColorModePreference] = useState<ColorMode | 'system'>(defaultMode);

  const resolvedColorMode: ColorMode = colorModePreference === 'system' 
    ? (systemColorScheme === 'dark' ? 'dark' : 'light')
    : colorModePreference;

  const currentColors = colors[resolvedColorMode];
  const isDark = resolvedColorMode === 'dark';
  const isLight = resolvedColorMode === 'light';

  const setColorMode = (mode: ColorMode | 'system') => {
    setColorModePreference(mode);
  };

  const toggleColorMode = () => {
    if (colorModePreference === 'system') {
      setColorMode(systemColorScheme === 'dark' ? 'light' : 'dark');
    } else {
      setColorMode(colorModePreference === 'dark' ? 'light' : 'dark');
    }
  };

  const value: ThemeContextType = {
    colorMode: resolvedColorMode,
    setColorMode,
    currentColors,
    isDark,
    isLight,
    toggleColorMode,
  };

  return (
    <ThemeContext.Provider value={value}>
      {children}
    </ThemeContext.Provider>
  );
}

export function useTheme(): ThemeContextType {
  const context = useContext(ThemeContext);
  if (!context) {
    throw new Error('useTheme must be used within a ThemeProvider');
  }
  return context;
}

export function useColorMode() {
  const { colorMode, setColorMode, toggleColorMode } = useTheme();
  return {
    colorMode,
    setColorMode,
    toggleColorMode,
  };
}

export function useColors() {
  const { currentColors } = useTheme();
  return currentColors;
}